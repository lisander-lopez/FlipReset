{"ast":null,"code":"import _objectSpread from\"/Users/Justin/go/src/FlipReset/project/flip-reset/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/Users/Justin/go/src/FlipReset/project/flip-reset/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import firebase from'firebase/app';import'firebase/auth';import'firebase/database';// import 'firebase/messaging';\nvar config={apiKey:process.env.REACT_APP_API_KEY,authDomain:process.env.REACT_APP_AUTH_DOMAIN,databaseURL:process.env.REACT_APP_DATABASE_URL,projectId:process.env.REACT_APP_PROJECT_ID,storageBucket:process.env.REACT_APP_STORAGE_BUCKET,messagingSenderId:process.env.REACT_APP_MESSAGING_SENDER_ID,appId:process.env.REACT_APP_APPID,measurementId:process.env.REACT_APP_MEASUREMENTID};// const config = {\n//   apiKey: \"AIzaSyAHkDGeM9tCKCIYyJ0pKL13fE-ICudCZ3M\",\n//   authDomain: \"test1-cf3a2.firebaseapp.com\",\n//   databaseURL: \"https://test1-cf3a2.firebaseio.com/\",\n//   projectId: \"test1-cf3a2\",\n//   storageBucket: \"test1-cf3a2.appspot.com\",\n//   messagingSenderId: \"521660089302\",\n//   appId: \"1:521660089302:web:b3a43bb3b0da115aa21a77\",\n//   measurementId: \"G-CZ9SCS5DQK\"\n// };\nvar fire=function fire(){var _this=this;_classCallCheck(this,fire);this.doCreateUserWithEmailAndPassword=function(email,password){return _this.auth.createUserWithEmailAndPassword(email,password);};this.doSendEmailVerification=function(){_this.auth.currentUser.sendEmailVerification({url:process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT});};this.doSignInWithEmailAndPassword=function(email,password){return _this.auth.signInWithEmailAndPassword(email,password);};this.doSignOut=function(){return _this.auth.signOut();};this.doPasswordUpdate=function(password){return _this.auth.currentUser.updatePassword(password);};this.doPasswordReset=function(email){return _this.auth.sendPasswordResetEmail(email);};this.doPasswordUpdate=function(password){return _this.auth.currentUser.updatePassword(password);};this.onAuthUserListener=function(next,fallback){return _this.auth.onAuthStateChanged(function(authUser){if(authUser){console.log(\"The authenticated user is: \");console.log(authUser);_this.user(authUser.uid).once('value').then(function(snapshot){var dbUser=snapshot.val();// merge auth and db user\nauthUser=_objectSpread({uid:authUser.uid,email:authUser.email,emailVerified:authUser.emailVerified},dbUser);next(authUser);});}else{fallback();}});};this.user=function(uid){return _this.db.ref(\"users/\".concat(uid));};this.users=function(){return _this.db.ref('users');};//console.log(process.env);\nfirebase.initializeApp(config);/* Helper */this.emailAuthProvider=firebase.auth.EmailAuthProvider;this.auth=firebase.auth();this.db=firebase.database();/* Social Sign In Method Provider */ /*\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();\n    */}/*\n      // *** Message API ***\n\n    message = uid => this.db.ref(`messages/${uid}`);\n\n    messages = () => this.db.ref('messages');\n    */;export default fire;","map":{"version":3,"sources":["/Users/Justin/go/src/FlipReset/project/flip-reset/src/components/Firebase/fire.js"],"names":["firebase","config","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_APPID","measurementId","REACT_APP_MEASUREMENTID","fire","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSendEmailVerification","currentUser","sendEmailVerification","url","REACT_APP_CONFIRMATION_EMAIL_REDIRECT","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordUpdate","updatePassword","doPasswordReset","sendPasswordResetEmail","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","console","log","user","uid","once","then","snapshot","dbUser","val","emailVerified","db","ref","users","initializeApp","emailAuthProvider","EmailAuthProvider","database"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\n// import 'firebase/messaging';\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APPID,\n  measurementId: process.env.REACT_APP_MEASUREMENTID\n};\n\n// const config = {\n//   apiKey: \"AIzaSyAHkDGeM9tCKCIYyJ0pKL13fE-ICudCZ3M\",\n//   authDomain: \"test1-cf3a2.firebaseapp.com\",\n//   databaseURL: \"https://test1-cf3a2.firebaseio.com/\",\n//   projectId: \"test1-cf3a2\",\n//   storageBucket: \"test1-cf3a2.appspot.com\",\n//   messagingSenderId: \"521660089302\",\n//   appId: \"1:521660089302:web:b3a43bb3b0da115aa21a77\",\n//   measurementId: \"G-CZ9SCS5DQK\"\n// };\n\nclass fire {\n  constructor() {\n    //console.log(process.env);\n    firebase.initializeApp(config);\n\n    /* Helper */\n    \n    this.emailAuthProvider = firebase.auth.EmailAuthProvider;\n\n    this.auth = firebase.auth();\n    this.db = firebase.database();\n\n    /* Social Sign In Method Provider */\n    /*\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();\n    */\n  }\n\n  doCreateUserWithEmailAndPassword = (email, password) => {\n    return this.auth.createUserWithEmailAndPassword(email, password);\n  }\n\n  doSendEmailVerification = () => {\n    this.auth.currentUser.sendEmailVerification({\n      url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT,\n    });\n  }\n\n  doSignInWithEmailAndPassword = (email, password) =>\n  this.auth.signInWithEmailAndPassword(email, password);\n  /*\n\n   doSignInWithGoogle = () =>\n    this.auth.signInWithPopup(this.googleProvider);\n\n  doSignInWithFacebook = () =>\n    this.auth.signInWithPopup(this.facebookProvider);\n\n  doSignInWithTwitter = () =>\n    this.auth.signInWithPopup(this.twitterProvider)\n\n  */\n\n  doSignOut = () => this.auth.signOut();\n\n  doPasswordUpdate = password =>\n    this.auth.currentUser.updatePassword(password);\n\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n  doPasswordUpdate = password =>\n    this.auth.currentUser.updatePassword(password);\n\n\n  // *** Merge Auth and DB User API *** //\n\n  onAuthUserListener = (next, fallback) =>\n    this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        console.log(\"The authenticated user is: \");\n        console.log(authUser);\n        this.user(authUser.uid)\n          .once('value')\n          .then(snapshot => {\n            const dbUser = snapshot.val();\n            // merge auth and db user\n            authUser = {\n              uid: authUser.uid,\n              email: authUser.email,\n              emailVerified: authUser.emailVerified,\n              //providerData: authUser.providerData,\n              ...dbUser,\n            };\n\n            next(authUser);\n          });\n      } else {\n        fallback();\n      }\n    });\n\n    // *** User API ***\n\n    user = uid => this.db.ref(`users/${uid}`);\n\n    users = () => this.db.ref('users');\n    /*\n      // *** Message API ***\n\n    message = uid => this.db.ref(`messages/${uid}`);\n\n    messages = () => this.db.ref('messages');\n    */\n}\n\nexport default fire;\n\n"]},"metadata":{},"sourceType":"module"}