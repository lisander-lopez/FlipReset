{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/storage'; // import 'firebase/messaging';\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APPID,\n  measurementId: process.env.REACT_APP_MEASUREMENTID\n}; // const config = {\n//   apiKey: \"AIzaSyAHkDGeM9tCKCIYyJ0pKL13fE-ICudCZ3M\",\n//   authDomain: \"test1-cf3a2.firebaseapp.com\",\n//   databaseURL: \"https://test1-cf3a2.firebaseio.com/\",\n//   projectId: \"test1-cf3a2\",\n//   storageBucket: \"test1-cf3a2.appspot.com\",\n//   messagingSenderId: \"521660089302\",\n//   appId: \"1:521660089302:web:b3a43bb3b0da115aa21a77\",\n//   measurementId: \"G-CZ9SCS5DQK\"\n// };\n\nclass fire {\n  constructor() {\n    this.doGrabFile = () => {\n      // Create a reference to the file we want to download\n      var starsRef = storageRef.child('images/stars.jpg'); // Get the download URL\n\n      starsRef.getDownloadURL().then(function (url) {// Insert url into an <img> tag to \"download\"\n      }).catch(function (error) {\n        // A full list of error codes is available at\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n          case 'storage/object-not-found':\n            // File doesn't exist\n            break;\n\n          case 'storage/unauthorized':\n            // User doesn't have permission to access the object\n            break;\n\n          case 'storage/canceled':\n            // User canceled the upload\n            break;\n\n          case 'storage/unknown':\n            // Unknown error occurred, inspect the server response\n            break;\n        }\n      });\n    };\n\n    this.doSubmitFile = file => {\n      var timestamp = new Date();\n      console.log(timestamp);\n      let storeRef = this.storageRef.child(String(timestamp));\n      var metadata = {\n        customMetadata: {\n          uid: this.auth.currentUser.uid\n        }\n      }; // Updating metadata\n\n      storeRef.put(file, metadata).then(function (snapshot) {\n        console.log(\"Uploaded a blob or file!\");\n      });\n    };\n\n    this.doCreateUserWithEmailAndPassword = (email, password) => {\n      return this.auth.createUserWithEmailAndPassword(email, password);\n    };\n\n    this.doSendEmailVerification = () => {\n      this.auth.currentUser.sendEmailVerification({\n        url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT\n      });\n    };\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.onAuthUserListener = (next, fallback) => this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        console.log(\"The authenticated user is: \");\n        console.log(authUser);\n        this.user(authUser.uid).once('value').then(snapshot => {\n          const dbUser = snapshot.val(); // merge auth and db user\n\n          authUser = {\n            uid: authUser.uid,\n            email: authUser.email,\n            emailVerified: authUser.emailVerified,\n            //providerData: authUser.providerData,\n            ...dbUser\n          };\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n\n    this.user = uid => this.db.ref(`users/${uid}`);\n\n    this.users = () => this.db.ref('users');\n\n    //console.log(process.env);\n    firebase.initializeApp(config);\n    /* Helper */\n\n    this.emailAuthProvider = firebase.auth.EmailAuthProvider;\n    this.auth = firebase.auth();\n    this.db = firebase.database();\n    const storage = firebase.storage();\n    this.storageRef = storage.ref();\n    /* Social Sign In Method Provider */\n\n    /*\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();\n    */\n    //export const storage = firebase.storage()\n    //export const storageRef = storage.ref();\n  }\n  /*\n    // *** Message API ***\n   message = uid => this.db.ref(`messages/${uid}`);\n   messages = () => this.db.ref('messages');\n  */\n\n\n}\n\nexport default fire;","map":{"version":3,"sources":["/Users/Justin/go/src/FlipReset/project/flip-reset/src/components/Firebase/fire.js"],"names":["firebase","config","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_APPID","measurementId","REACT_APP_MEASUREMENTID","fire","constructor","doGrabFile","starsRef","storageRef","child","getDownloadURL","then","url","catch","error","code","doSubmitFile","file","timestamp","Date","console","log","storeRef","String","metadata","customMetadata","uid","auth","currentUser","put","snapshot","doCreateUserWithEmailAndPassword","email","password","createUserWithEmailAndPassword","doSendEmailVerification","sendEmailVerification","REACT_APP_CONFIRMATION_EMAIL_REDIRECT","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordUpdate","updatePassword","doPasswordReset","sendPasswordResetEmail","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","once","dbUser","val","emailVerified","db","ref","users","initializeApp","emailAuthProvider","EmailAuthProvider","database","storage"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/storage';\n\n// import 'firebase/messaging';\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APPID,\n  measurementId: process.env.REACT_APP_MEASUREMENTID\n};\n\n// const config = {\n//   apiKey: \"AIzaSyAHkDGeM9tCKCIYyJ0pKL13fE-ICudCZ3M\",\n//   authDomain: \"test1-cf3a2.firebaseapp.com\",\n//   databaseURL: \"https://test1-cf3a2.firebaseio.com/\",\n//   projectId: \"test1-cf3a2\",\n//   storageBucket: \"test1-cf3a2.appspot.com\",\n//   messagingSenderId: \"521660089302\",\n//   appId: \"1:521660089302:web:b3a43bb3b0da115aa21a77\",\n//   measurementId: \"G-CZ9SCS5DQK\"\n// };\n\nclass fire {\n  constructor() {\n    //console.log(process.env);\n    firebase.initializeApp(config);\n\n    /* Helper */\n\n    this.emailAuthProvider = firebase.auth.EmailAuthProvider;\n\n    this.auth = firebase.auth();\n    this.db = firebase.database();\n    const storage = firebase.storage();\n    this.storageRef = storage.ref();\n\n    /* Social Sign In Method Provider */\n    /*\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();\n    */\n    //export const storage = firebase.storage()\n    //export const storageRef = storage.ref();\n  }\n\n\n  doGrabFile = () => {\n\n    // Create a reference to the file we want to download\n    var starsRef = storageRef.child('images/stars.jpg');\n\n    // Get the download URL\n    starsRef.getDownloadURL().then(function (url) {\n      // Insert url into an <img> tag to \"download\"\n    }).catch(function (error) {\n\n      // A full list of error codes is available at\n      // https://firebase.google.com/docs/storage/web/handle-errors\n      switch (error.code) {\n        case 'storage/object-not-found':\n          // File doesn't exist\n          break;\n\n        case 'storage/unauthorized':\n          // User doesn't have permission to access the object\n          break;\n\n        case 'storage/canceled':\n          // User canceled the upload\n          break;\n\n \n\n    case 'storage/unknown':\n      // Unknown error occurred, inspect the server response\n      break;\n  }\n});\n\n  }\n\n\ndoSubmitFile = (file) => {\n  var timestamp = new Date();\n  console.log(timestamp);\n  let storeRef = this.storageRef.child(String(timestamp));\n  var metadata = {\n    customMetadata: {\n      uid: this.auth.currentUser.uid,\n    },\n  };\n  // Updating metadata\n  storeRef.put(file, metadata).then(function (snapshot) {\n    console.log(\"Uploaded a blob or file!\");\n  });\n};\n\n\ndoCreateUserWithEmailAndPassword = (email, password) => {\n  return this.auth.createUserWithEmailAndPassword(email, password);\n}\n\ndoSendEmailVerification = () => {\n  this.auth.currentUser.sendEmailVerification({\n    url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT,\n  });\n}\n\ndoSignInWithEmailAndPassword = (email, password) =>\n  this.auth.signInWithEmailAndPassword(email, password);\n/*\n\n doSignInWithGoogle = () =>\n  this.auth.signInWithPopup(this.googleProvider);\n\ndoSignInWithFacebook = () =>\n  this.auth.signInWithPopup(this.facebookProvider);\n\ndoSignInWithTwitter = () =>\n  this.auth.signInWithPopup(this.twitterProvider)\n\n*/\n\ndoSignOut = () => this.auth.signOut();\n\ndoPasswordUpdate = password =>\n  this.auth.currentUser.updatePassword(password);\n\ndoPasswordReset = email => this.auth.sendPasswordResetEmail(email);\ndoPasswordUpdate = password =>\n  this.auth.currentUser.updatePassword(password);\n\n\n// *** Merge Auth and DB User API *** //\n\nonAuthUserListener = (next, fallback) =>\n  this.auth.onAuthStateChanged(authUser => {\n    if (authUser) {\n      console.log(\"The authenticated user is: \");\n      console.log(authUser);\n      this.user(authUser.uid)\n        .once('value')\n        .then(snapshot => {\n          const dbUser = snapshot.val();\n          // merge auth and db user\n          authUser = {\n            uid: authUser.uid,\n            email: authUser.email,\n            emailVerified: authUser.emailVerified,\n            //providerData: authUser.providerData,\n            ...dbUser,\n          };\n\n          next(authUser);\n        });\n    } else {\n      fallback();\n    }\n  });\n\n// *** User API ***\n\nuser = uid => this.db.ref(`users/${uid}`);\n\nusers = () => this.db.ref('users');\n  /*\n    // *** Message API ***\n\n  message = uid => this.db.ref(`messages/${uid}`);\n\n  messages = () => this.db.ref('messages');\n  */\n}\n\nexport default fire;\n\n"]},"metadata":{},"sourceType":"module"}