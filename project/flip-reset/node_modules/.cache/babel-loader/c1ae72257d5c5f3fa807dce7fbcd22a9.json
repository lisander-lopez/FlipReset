{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/storage'; // import 'firebase/messaging';\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APPID,\n  measurementId: process.env.REACT_APP_MEASUREMENTID\n}; // const config = {\n//   apiKey: \"AIzaSyAHkDGeM9tCKCIYyJ0pKL13fE-ICudCZ3M\",\n//   authDomain: \"test1-cf3a2.firebaseapp.com\",\n//   databaseURL: \"https://test1-cf3a2.firebaseio.com/\",\n//   projectId: \"test1-cf3a2\",\n//   storageBucket: \"test1-cf3a2.appspot.com\",\n//   messagingSenderId: \"521660089302\",\n//   appId: \"1:521660089302:web:b3a43bb3b0da115aa21a77\",\n//   measurementId: \"G-CZ9SCS5DQK\"\n// };\n\nclass fire {\n  constructor() {\n    this.doGrabFile = () => {\n      // Create a reference under which you want to list\n      var listRef = this.storageRef.child('posts/' + this.auth.currentUser.uid); // Find all the prefixes and items.\n\n      listRef.listAll().then(function (res) {\n        res.prefixes.forEach(function (folderRef) {\n          console.log(folderRef); // You may call listAll() recursively on them.\n        });\n        res.items.forEach(function (itemRef) {\n          console.log(itemRef); // All the items under listRef.\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n      var listRef = storageRef.child('posts/' + this.auth.currentUser.uid);\n      listRef.listAll().then(function (result) {\n        console.log(result);\n        result.items.forEach(function (imgRef) {\n          imgRef.getDownloadURL().then(function (url) {\n            var img = $('<img />').attr({\n              'id': 'poster' + img_index,\n              'src': url,\n              'alt': 'image',\n              'title': 'image',\n              'width': 250\n            }).appendTo('#img-area');\n            img_index++;\n          });\n        });\n      }).catch(function (error) {\n        console.log(error);\n      }); // var listRef = this.storageRef.child('/posts/' + this.auth.currentUser.uid);\n      // let testing = list.getDownloadURL();\n      // let ans = testing.then(function (url) {\n      //   return url;\n      // })\n      // return ans;\n    };\n\n    this.doSubmitFile = file => {\n      var timestamp = new Date();\n      console.log(timestamp);\n      let storeRef = this.storageRef.child(String(timestamp));\n      var metadata = {\n        customMetadata: {\n          uid: this.auth.currentUser.uid\n        }\n      }; // Updating metadata\n\n      storeRef.put(file, metadata).then(function (snapshot) {\n        console.log(\"Uploaded a blob or file!\");\n      });\n    };\n\n    this.doCreateUserWithEmailAndPassword = (email, password) => {\n      return this.auth.createUserWithEmailAndPassword(email, password);\n    };\n\n    this.doSendEmailVerification = () => {\n      this.auth.currentUser.sendEmailVerification({\n        url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT\n      });\n    };\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.onAuthUserListener = (next, fallback) => this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        console.log(\"The authenticated user is: \");\n        console.log(authUser);\n        this.user(authUser.uid).once('value').then(snapshot => {\n          const dbUser = snapshot.val(); // merge auth and db user\n\n          authUser = {\n            uid: authUser.uid,\n            email: authUser.email,\n            emailVerified: authUser.emailVerified,\n            //providerData: authUser.providerData,\n            ...dbUser\n          };\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n\n    this.user = uid => this.db.ref(`users/${uid}`);\n\n    this.users = () => this.db.ref('users');\n\n    //console.log(process.env);\n    firebase.initializeApp(config);\n    /* Helper */\n\n    this.emailAuthProvider = firebase.auth.EmailAuthProvider;\n    this.auth = firebase.auth();\n    this.db = firebase.database();\n    const storage = firebase.storage();\n    this.storageRef = storage.ref();\n    /* Social Sign In Method Provider */\n\n    /*\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();\n    */\n    //export const storage = firebase.storage()\n    //export const storageRef = storage.ref();\n  }\n  /*\n    // *** Message API ***\n   message = uid => this.db.ref(`messages/${uid}`);\n   messages = () => this.db.ref('messages');\n  */\n\n\n}\n\nexport default fire;","map":{"version":3,"sources":["/Users/Justin/go/src/FlipReset/project/flip-reset/src/components/Firebase/fire.js"],"names":["firebase","config","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_APPID","measurementId","REACT_APP_MEASUREMENTID","fire","constructor","doGrabFile","listRef","storageRef","child","auth","currentUser","uid","listAll","then","res","prefixes","forEach","folderRef","console","log","items","itemRef","catch","error","result","imgRef","getDownloadURL","url","img","$","attr","img_index","appendTo","doSubmitFile","file","timestamp","Date","storeRef","String","metadata","customMetadata","put","snapshot","doCreateUserWithEmailAndPassword","email","password","createUserWithEmailAndPassword","doSendEmailVerification","sendEmailVerification","REACT_APP_CONFIRMATION_EMAIL_REDIRECT","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordUpdate","updatePassword","doPasswordReset","sendPasswordResetEmail","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","once","dbUser","val","emailVerified","db","ref","users","initializeApp","emailAuthProvider","EmailAuthProvider","database","storage"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/storage';\n\n// import 'firebase/messaging';\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APPID,\n  measurementId: process.env.REACT_APP_MEASUREMENTID\n};\n\n// const config = {\n//   apiKey: \"AIzaSyAHkDGeM9tCKCIYyJ0pKL13fE-ICudCZ3M\",\n//   authDomain: \"test1-cf3a2.firebaseapp.com\",\n//   databaseURL: \"https://test1-cf3a2.firebaseio.com/\",\n//   projectId: \"test1-cf3a2\",\n//   storageBucket: \"test1-cf3a2.appspot.com\",\n//   messagingSenderId: \"521660089302\",\n//   appId: \"1:521660089302:web:b3a43bb3b0da115aa21a77\",\n//   measurementId: \"G-CZ9SCS5DQK\"\n// };\n\nclass fire {\n  constructor() {\n    //console.log(process.env);\n    firebase.initializeApp(config);\n\n    /* Helper */\n\n    this.emailAuthProvider = firebase.auth.EmailAuthProvider;\n\n    this.auth = firebase.auth();\n    this.db = firebase.database();\n    const storage = firebase.storage();\n    this.storageRef = storage.ref();\n\n    /* Social Sign In Method Provider */\n    /*\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();\n    */\n    //export const storage = firebase.storage()\n    //export const storageRef = storage.ref();\n  }\n\n\n  doGrabFile = () => {\n\n    // Create a reference under which you want to list\n    var listRef = this.storageRef.child('posts/' + this.auth.currentUser.uid);\n    // Find all the prefixes and items.\n    listRef.listAll().then(function (res) {\n      res.prefixes.forEach(function (folderRef) {\n        console.log(folderRef)\n        // You may call listAll() recursively on them.\n      });\n      res.items.forEach(function (itemRef) {\n        console.log(itemRef)\n        // All the items under listRef.\n      });\n    }).catch(function (error) {\n      console.log(error)\n    });\n\n\n\n    var listRef = storageRef.child('posts/' + this.auth.currentUser.uid);\n    listRef.listAll().then(function (result) {\n      console.log(result);\n      result.items.forEach(function (imgRef) {\n        imgRef.getDownloadURL().then(function (url) {\n          var img = $('<img />').attr({\n            'id': 'poster' + img_index,\n            'src': url,\n            'alt': 'image',\n            'title': 'image',\n            'width': 250\n          }).appendTo('#img-area');\n\n          img_index++;\n        });\n      })\n    }).catch(function (error) {\n      console.log(error);\n    });\n\n    // var listRef = this.storageRef.child('/posts/' + this.auth.currentUser.uid);\n    // let testing = list.getDownloadURL();\n    // let ans = testing.then(function (url) {\n    //   return url;\n    // })\n    // return ans;\n  }\n\n\n  doSubmitFile = (file) => {\n    var timestamp = new Date();\n    console.log(timestamp);\n    let storeRef = this.storageRef.child(String(timestamp));\n    var metadata = {\n      customMetadata: {\n        uid: this.auth.currentUser.uid,\n      },\n    };\n    // Updating metadata\n    storeRef.put(file, metadata).then(function (snapshot) {\n      console.log(\"Uploaded a blob or file!\");\n    });\n  };\n\n\n  doCreateUserWithEmailAndPassword = (email, password) => {\n    return this.auth.createUserWithEmailAndPassword(email, password);\n  }\n\n  doSendEmailVerification = () => {\n    this.auth.currentUser.sendEmailVerification({\n      url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT,\n    });\n  }\n\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n  /*\n\n   doSignInWithGoogle = () =>\n    this.auth.signInWithPopup(this.googleProvider);\n\n  doSignInWithFacebook = () =>\n    this.auth.signInWithPopup(this.facebookProvider);\n\n  doSignInWithTwitter = () =>\n    this.auth.signInWithPopup(this.twitterProvider)\n\n  */\n\n  doSignOut = () => this.auth.signOut();\n\n  doPasswordUpdate = password =>\n    this.auth.currentUser.updatePassword(password);\n\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n  doPasswordUpdate = password =>\n    this.auth.currentUser.updatePassword(password);\n\n\n  // *** Merge Auth and DB User API *** //\n\n  onAuthUserListener = (next, fallback) =>\n    this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        console.log(\"The authenticated user is: \");\n        console.log(authUser);\n        this.user(authUser.uid)\n          .once('value')\n          .then(snapshot => {\n            const dbUser = snapshot.val();\n            // merge auth and db user\n            authUser = {\n              uid: authUser.uid,\n              email: authUser.email,\n              emailVerified: authUser.emailVerified,\n              //providerData: authUser.providerData,\n              ...dbUser,\n            };\n\n            next(authUser);\n          });\n      } else {\n        fallback();\n      }\n    });\n\n  // *** User API ***\n\n  user = uid => this.db.ref(`users/${uid}`);\n\n  users = () => this.db.ref('users');\n  /*\n    // *** Message API ***\n\n  message = uid => this.db.ref(`messages/${uid}`);\n\n  messages = () => this.db.ref('messages');\n  */\n}\n\nexport default fire;\n\n"]},"metadata":{},"sourceType":"module"}