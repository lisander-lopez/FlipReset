{"ast":null,"code":"import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/storage'; // import 'firebase/messaging';\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APPID,\n  measurementId: process.env.REACT_APP_MEASUREMENTID\n}; // const config = {\n//   apiKey: \"AIzaSyAHkDGeM9tCKCIYyJ0pKL13fE-ICudCZ3M\",\n//   authDomain: \"test1-cf3a2.firebaseapp.com\",\n//   databaseURL: \"https://test1-cf3a2.firebaseio.com/\",\n//   projectId: \"test1-cf3a2\",\n//   storageBucket: \"test1-cf3a2.appspot.com\",\n//   messagingSenderId: \"521660089302\",\n//   appId: \"1:521660089302:web:b3a43bb3b0da115aa21a77\",\n//   measurementId: \"G-CZ9SCS5DQK\"\n// };\n\nclass fire {\n  constructor() {\n    this.doGrabFile = () => {\n      var listRef = this.storageRef.child('posts/' + this.auth.currentUser.uid);\n      var i = 0; // var listRef = this.storageRef.child('/posts/' + this.auth.currentUser.uid);\n      // let testing = list.getDownloadURL();\n      // let ans = testing.then(function (url) {\n      //   return url;\n      // })\n      // return ans;\n    };\n\n    this.doSubmitFile = file => {\n      var timestamp = new Date();\n      console.log(timestamp);\n      let storeRef = this.storageRef.child(String(timestamp));\n      var metadata = {\n        customMetadata: {\n          uid: this.auth.currentUser.uid\n        }\n      }; // Updating metadata\n\n      storeRef.put(file, metadata).then(function (snapshot) {\n        console.log(\"Uploaded a blob or file!\");\n      });\n    };\n\n    this.doCreateUserWithEmailAndPassword = (email, password) => {\n      return this.auth.createUserWithEmailAndPassword(email, password);\n    };\n\n    this.doSendEmailVerification = () => {\n      this.auth.currentUser.sendEmailVerification({\n        url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT\n      });\n    };\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.onAuthUserListener = (next, fallback) => this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        console.log(\"The authenticated user is: \");\n        console.log(authUser);\n        this.user(authUser.uid).once('value').then(snapshot => {\n          const dbUser = snapshot.val(); // merge auth and db user\n\n          authUser = {\n            uid: authUser.uid,\n            email: authUser.email,\n            emailVerified: authUser.emailVerified,\n            //providerData: authUser.providerData,\n            ...dbUser\n          };\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n\n    this.user = uid => this.db.ref(`users/${uid}`);\n\n    this.users = () => this.db.ref('users');\n\n    //console.log(process.env);\n    firebase.initializeApp(config);\n    /* Helper */\n\n    this.emailAuthProvider = firebase.auth.EmailAuthProvider;\n    this.auth = firebase.auth();\n    this.db = firebase.database();\n    const storage = firebase.storage();\n    this.storageRef = storage.ref();\n    /* Social Sign In Method Provider */\n\n    /*\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();\n    */\n    //export const storage = firebase.storage()\n    //export const storageRef = storage.ref();\n  }\n  /*\n    // *** Message API ***\n   message = uid => this.db.ref(`messages/${uid}`);\n   messages = () => this.db.ref('messages');\n  */\n\n\n}\n\nexport default fire;","map":{"version":3,"sources":["/Users/Justin/go/src/FlipReset/project/flip-reset/src/components/Firebase/fire.js"],"names":["firebase","config","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_APPID","measurementId","REACT_APP_MEASUREMENTID","fire","constructor","doGrabFile","listRef","storageRef","child","auth","currentUser","uid","i","doSubmitFile","file","timestamp","Date","console","log","storeRef","String","metadata","customMetadata","put","then","snapshot","doCreateUserWithEmailAndPassword","email","password","createUserWithEmailAndPassword","doSendEmailVerification","sendEmailVerification","url","REACT_APP_CONFIRMATION_EMAIL_REDIRECT","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordUpdate","updatePassword","doPasswordReset","sendPasswordResetEmail","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","once","dbUser","val","emailVerified","db","ref","users","initializeApp","emailAuthProvider","EmailAuthProvider","database","storage"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,cAA1B;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AACA,OAAO,kBAAP,C,CAGA;;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,iBADP;AAEbC,EAAAA,UAAU,EAAEH,OAAO,CAACC,GAAR,CAAYG,qBAFX;AAGbC,EAAAA,WAAW,EAAEL,OAAO,CAACC,GAAR,CAAYK,sBAHZ;AAIbC,EAAAA,SAAS,EAAEP,OAAO,CAACC,GAAR,CAAYO,oBAJV;AAKbC,EAAAA,aAAa,EAAET,OAAO,CAACC,GAAR,CAAYS,wBALd;AAMbC,EAAAA,iBAAiB,EAAEX,OAAO,CAACC,GAAR,CAAYW,6BANlB;AAObC,EAAAA,KAAK,EAAEb,OAAO,CAACC,GAAR,CAAYa,eAPN;AAQbC,EAAAA,aAAa,EAAEf,OAAO,CAACC,GAAR,CAAYe;AARd,CAAf,C,CAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,IAAN,CAAW;AACTC,EAAAA,WAAW,GAAG;AAAA,SAwBdC,UAxBc,GAwBD,MAAM;AAKjB,UAAIC,OAAO,GAAG,KAAKC,UAAL,CAAgBC,KAAhB,CAAsB,WAAW,KAAKC,IAAL,CAAUC,WAAV,CAAsBC,GAAvD,CAAd;AACA,UAAIC,CAAC,GAAG,CAAR,CANiB,CASjB;AACA;AACA;AACA;AACA;AACA;AACD,KAvCa;;AAAA,SA0ChBC,YA1CgB,GA0CAC,IAAD,IAAU;AACvB,UAAIC,SAAS,GAAG,IAAIC,IAAJ,EAAhB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACA,UAAII,QAAQ,GAAG,KAAKZ,UAAL,CAAgBC,KAAhB,CAAsBY,MAAM,CAACL,SAAD,CAA5B,CAAf;AACA,UAAIM,QAAQ,GAAG;AACbC,QAAAA,cAAc,EAAE;AACdX,UAAAA,GAAG,EAAE,KAAKF,IAAL,CAAUC,WAAV,CAAsBC;AADb;AADH,OAAf,CAJuB,CASvB;;AACAQ,MAAAA,QAAQ,CAACI,GAAT,CAAaT,IAAb,EAAmBO,QAAnB,EAA6BG,IAA7B,CAAkC,UAAUC,QAAV,EAAoB;AACpDR,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD,OAFD;AAGD,KAvDe;;AAAA,SA0DhBQ,gCA1DgB,GA0DmB,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACtD,aAAO,KAAKnB,IAAL,CAAUoB,8BAAV,CAAyCF,KAAzC,EAAgDC,QAAhD,CAAP;AACD,KA5De;;AAAA,SA8DhBE,uBA9DgB,GA8DU,MAAM;AAC9B,WAAKrB,IAAL,CAAUC,WAAV,CAAsBqB,qBAAtB,CAA4C;AAC1CC,QAAAA,GAAG,EAAE9C,OAAO,CAACC,GAAR,CAAY8C;AADyB,OAA5C;AAGD,KAlEe;;AAAA,SAoEhBC,4BApEgB,GAoEe,CAACP,KAAD,EAAQC,QAAR,KAC7B,KAAKnB,IAAL,CAAU0B,0BAAV,CAAqCR,KAArC,EAA4CC,QAA5C,CArEc;;AAAA,SAmFhBQ,SAnFgB,GAmFJ,MAAM,KAAK3B,IAAL,CAAU4B,OAAV,EAnFF;;AAAA,SAqFhBC,gBArFgB,GAqFGV,QAAQ,IACzB,KAAKnB,IAAL,CAAUC,WAAV,CAAsB6B,cAAtB,CAAqCX,QAArC,CAtFc;;AAAA,SAwFhBY,eAxFgB,GAwFEb,KAAK,IAAI,KAAKlB,IAAL,CAAUgC,sBAAV,CAAiCd,KAAjC,CAxFX;;AAAA,SAyFhBW,gBAzFgB,GAyFGV,QAAQ,IACzB,KAAKnB,IAAL,CAAUC,WAAV,CAAsB6B,cAAtB,CAAqCX,QAArC,CA1Fc;;AAAA,SA+FhBc,kBA/FgB,GA+FK,CAACC,IAAD,EAAOC,QAAP,KACnB,KAAKnC,IAAL,CAAUoC,kBAAV,CAA6BC,QAAQ,IAAI;AACvC,UAAIA,QAAJ,EAAc;AACZ7B,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY4B,QAAZ;AACA,aAAKC,IAAL,CAAUD,QAAQ,CAACnC,GAAnB,EACGqC,IADH,CACQ,OADR,EAEGxB,IAFH,CAEQC,QAAQ,IAAI;AAChB,gBAAMwB,MAAM,GAAGxB,QAAQ,CAACyB,GAAT,EAAf,CADgB,CAEhB;;AACAJ,UAAAA,QAAQ,GAAG;AACTnC,YAAAA,GAAG,EAAEmC,QAAQ,CAACnC,GADL;AAETgB,YAAAA,KAAK,EAAEmB,QAAQ,CAACnB,KAFP;AAGTwB,YAAAA,aAAa,EAAEL,QAAQ,CAACK,aAHf;AAIT;AACA,eAAGF;AALM,WAAX;AAQAN,UAAAA,IAAI,CAACG,QAAD,CAAJ;AACD,SAdH;AAeD,OAlBD,MAkBO;AACLF,QAAAA,QAAQ;AACT;AACF,KAtBD,CAhGc;;AAAA,SA0HhBG,IA1HgB,GA0HTpC,GAAG,IAAI,KAAKyC,EAAL,CAAQC,GAAR,CAAa,SAAQ1C,GAAI,EAAzB,CA1HE;;AAAA,SA4HhB2C,KA5HgB,GA4HR,MAAM,KAAKF,EAAL,CAAQC,GAAR,CAAY,OAAZ,CA5HE;;AACZ;AACAtE,IAAAA,QAAQ,CAACwE,aAAT,CAAuBvE,MAAvB;AAEA;;AAEA,SAAKwE,iBAAL,GAAyBzE,QAAQ,CAAC0B,IAAT,CAAcgD,iBAAvC;AAEA,SAAKhD,IAAL,GAAY1B,QAAQ,CAAC0B,IAAT,EAAZ;AACA,SAAK2C,EAAL,GAAUrE,QAAQ,CAAC2E,QAAT,EAAV;AACA,UAAMC,OAAO,GAAG5E,QAAQ,CAAC4E,OAAT,EAAhB;AACA,SAAKpD,UAAL,GAAkBoD,OAAO,CAACN,GAAR,EAAlB;AAEA;;AACA;;;;;AAKA;AACA;AACD;AAwGD;;;;;;;AA9HS;;AAuIX,eAAelD,IAAf","sourcesContent":["import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/storage';\n\n\n// import 'firebase/messaging';\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APPID,\n  measurementId: process.env.REACT_APP_MEASUREMENTID\n};\n\n// const config = {\n//   apiKey: \"AIzaSyAHkDGeM9tCKCIYyJ0pKL13fE-ICudCZ3M\",\n//   authDomain: \"test1-cf3a2.firebaseapp.com\",\n//   databaseURL: \"https://test1-cf3a2.firebaseio.com/\",\n//   projectId: \"test1-cf3a2\",\n//   storageBucket: \"test1-cf3a2.appspot.com\",\n//   messagingSenderId: \"521660089302\",\n//   appId: \"1:521660089302:web:b3a43bb3b0da115aa21a77\",\n//   measurementId: \"G-CZ9SCS5DQK\"\n// };\n\nclass fire {\n  constructor() {\n    //console.log(process.env);\n    firebase.initializeApp(config);\n\n    /* Helper */\n\n    this.emailAuthProvider = firebase.auth.EmailAuthProvider;\n\n    this.auth = firebase.auth();\n    this.db = firebase.database();\n    const storage = firebase.storage();\n    this.storageRef = storage.ref();\n\n    /* Social Sign In Method Provider */\n    /*\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();\n    */\n    //export const storage = firebase.storage()\n    //export const storageRef = storage.ref();\n  }\n\n\n  doGrabFile = () => {\n\n    \n\n\n    var listRef = this.storageRef.child('posts/' + this.auth.currentUser.uid);\n    var i = 0\n\n\n    // var listRef = this.storageRef.child('/posts/' + this.auth.currentUser.uid);\n    // let testing = list.getDownloadURL();\n    // let ans = testing.then(function (url) {\n    //   return url;\n    // })\n    // return ans;\n  }\n\n\ndoSubmitFile = (file) => {\n  var timestamp = new Date();\n  console.log(timestamp);\n  let storeRef = this.storageRef.child(String(timestamp));\n  var metadata = {\n    customMetadata: {\n      uid: this.auth.currentUser.uid,\n    },\n  };\n  // Updating metadata\n  storeRef.put(file, metadata).then(function (snapshot) {\n    console.log(\"Uploaded a blob or file!\");\n  });\n};\n\n\ndoCreateUserWithEmailAndPassword = (email, password) => {\n  return this.auth.createUserWithEmailAndPassword(email, password);\n}\n\ndoSendEmailVerification = () => {\n  this.auth.currentUser.sendEmailVerification({\n    url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT,\n  });\n}\n\ndoSignInWithEmailAndPassword = (email, password) =>\n  this.auth.signInWithEmailAndPassword(email, password);\n/*\n\n doSignInWithGoogle = () =>\n  this.auth.signInWithPopup(this.googleProvider);\n\ndoSignInWithFacebook = () =>\n  this.auth.signInWithPopup(this.facebookProvider);\n\ndoSignInWithTwitter = () =>\n  this.auth.signInWithPopup(this.twitterProvider)\n\n*/\n\ndoSignOut = () => this.auth.signOut();\n\ndoPasswordUpdate = password =>\n  this.auth.currentUser.updatePassword(password);\n\ndoPasswordReset = email => this.auth.sendPasswordResetEmail(email);\ndoPasswordUpdate = password =>\n  this.auth.currentUser.updatePassword(password);\n\n\n// *** Merge Auth and DB User API *** //\n\nonAuthUserListener = (next, fallback) =>\n  this.auth.onAuthStateChanged(authUser => {\n    if (authUser) {\n      console.log(\"The authenticated user is: \");\n      console.log(authUser);\n      this.user(authUser.uid)\n        .once('value')\n        .then(snapshot => {\n          const dbUser = snapshot.val();\n          // merge auth and db user\n          authUser = {\n            uid: authUser.uid,\n            email: authUser.email,\n            emailVerified: authUser.emailVerified,\n            //providerData: authUser.providerData,\n            ...dbUser,\n          };\n\n          next(authUser);\n        });\n    } else {\n      fallback();\n    }\n  });\n\n// *** User API ***\n\nuser = uid => this.db.ref(`users/${uid}`);\n\nusers = () => this.db.ref('users');\n  /*\n    // *** Message API ***\n\n  message = uid => this.db.ref(`messages/${uid}`);\n\n  messages = () => this.db.ref('messages');\n  */\n}\n\nexport default fire;\n\n"]},"metadata":{},"sourceType":"module"}