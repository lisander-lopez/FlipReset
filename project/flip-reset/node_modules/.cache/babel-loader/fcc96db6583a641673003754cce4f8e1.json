{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/storage'; // import 'firebase/messaging';\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APPID,\n  measurementId: process.env.REACT_APP_MEASUREMENTID\n}; // const config = {\n//   apiKey: \"AIzaSyAHkDGeM9tCKCIYyJ0pKL13fE-ICudCZ3M\",\n//   authDomain: \"test1-cf3a2.firebaseapp.com\",\n//   databaseURL: \"https://test1-cf3a2.firebaseio.com/\",\n//   projectId: \"test1-cf3a2\",\n//   storageBucket: \"test1-cf3a2.appspot.com\",\n//   messagingSenderId: \"521660089302\",\n//   appId: \"1:521660089302:web:b3a43bb3b0da115aa21a77\",\n//   measurementId: \"G-CZ9SCS5DQK\"\n// };\n\nclass fire {\n  constructor() {\n    this.doGrabFile = () => {\n      const image = firebase.storage().ref().child('/posts/' + this.auth.currentUser.uid);\n      let testing = image.getDownloadURL();\n      let ans = testing.then(function (url) {\n        return url;\n      });\n      return ans;\n    };\n\n    this.doSubmitFile = file => {\n      var timestamp = new Date();\n      console.log(timestamp);\n      let storeRef = this.storageRef.child(String(timestamp));\n      var metadata = {\n        customMetadata: {\n          uid: this.auth.currentUser.uid\n        }\n      }; // Updating metadata\n\n      storeRef.put(file, metadata).then(function (snapshot) {\n        console.log(\"Uploaded a blob or file!\");\n      });\n    };\n\n    this.doCreateUserWithEmailAndPassword = (email, password) => {\n      return this.auth.createUserWithEmailAndPassword(email, password);\n    };\n\n    this.doSendEmailVerification = () => {\n      this.auth.currentUser.sendEmailVerification({\n        url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT\n      });\n    };\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.onAuthUserListener = (next, fallback) => this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        console.log(\"The authenticated user is: \");\n        console.log(authUser);\n        this.user(authUser.uid).once('value').then(snapshot => {\n          const dbUser = snapshot.val(); // merge auth and db user\n\n          authUser = {\n            uid: authUser.uid,\n            email: authUser.email,\n            emailVerified: authUser.emailVerified,\n            //providerData: authUser.providerData,\n            ...dbUser\n          };\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n\n    this.user = uid => this.db.ref(`users/${uid}`);\n\n    this.users = () => this.db.ref('users');\n\n    //console.log(process.env);\n    firebase.initializeApp(config);\n    /* Helper */\n\n    this.emailAuthProvider = firebase.auth.EmailAuthProvider;\n    this.auth = firebase.auth();\n    this.db = firebase.database();\n    const storage = firebase.storage();\n    this.storageRef = storage.ref();\n    /* Social Sign In Method Provider */\n\n    /*\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();\n    */\n    //export const storage = firebase.storage()\n    //export const storageRef = storage.ref();\n  }\n  /*\n    // *** Message API ***\n   message = uid => this.db.ref(`messages/${uid}`);\n   messages = () => this.db.ref('messages');\n  */\n\n\n}\n\nexport default fire;","map":{"version":3,"sources":["/Users/Justin/go/src/FlipReset/project/flip-reset/src/components/Firebase/fire.js"],"names":["firebase","config","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_APPID","measurementId","REACT_APP_MEASUREMENTID","fire","constructor","doGrabFile","image","storage","ref","child","auth","currentUser","uid","testing","getDownloadURL","ans","then","url","doSubmitFile","file","timestamp","Date","console","log","storeRef","storageRef","String","metadata","customMetadata","put","snapshot","doCreateUserWithEmailAndPassword","email","password","createUserWithEmailAndPassword","doSendEmailVerification","sendEmailVerification","REACT_APP_CONFIRMATION_EMAIL_REDIRECT","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordUpdate","updatePassword","doPasswordReset","sendPasswordResetEmail","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","once","dbUser","val","emailVerified","db","users","initializeApp","emailAuthProvider","EmailAuthProvider","database"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/storage';\n\n// import 'firebase/messaging';\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APPID,\n  measurementId: process.env.REACT_APP_MEASUREMENTID\n};\n\n// const config = {\n//   apiKey: \"AIzaSyAHkDGeM9tCKCIYyJ0pKL13fE-ICudCZ3M\",\n//   authDomain: \"test1-cf3a2.firebaseapp.com\",\n//   databaseURL: \"https://test1-cf3a2.firebaseio.com/\",\n//   projectId: \"test1-cf3a2\",\n//   storageBucket: \"test1-cf3a2.appspot.com\",\n//   messagingSenderId: \"521660089302\",\n//   appId: \"1:521660089302:web:b3a43bb3b0da115aa21a77\",\n//   measurementId: \"G-CZ9SCS5DQK\"\n// };\n\nclass fire {\n  constructor() {\n    //console.log(process.env);\n    firebase.initializeApp(config);\n\n    /* Helper */\n\n    this.emailAuthProvider = firebase.auth.EmailAuthProvider;\n\n    this.auth = firebase.auth();\n    this.db = firebase.database();\n    const storage = firebase.storage();\n    this.storageRef = storage.ref();\n\n    /* Social Sign In Method Provider */\n    /*\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();\n    */\n    //export const storage = firebase.storage()\n    //export const storageRef = storage.ref();\n  }\n\n\n  doGrabFile = () => {\n\n    const image = firebase.storage().ref().child('/posts/'+this.auth.currentUser.uid);\n    let testing = image.getDownloadURL();\n    let ans = testing.then(function (url) {\n      return url;\n    })\n    return ans;\n  }\n\n\n  doSubmitFile = (file) => {\n    var timestamp = new Date();\n    console.log(timestamp);\n    let storeRef = this.storageRef.child(String(timestamp));\n    var metadata = {\n      customMetadata: {\n        uid: this.auth.currentUser.uid,\n      },\n    };\n    // Updating metadata\n    storeRef.put(file, metadata).then(function (snapshot) {\n      console.log(\"Uploaded a blob or file!\");\n    });\n  };\n\n\n  doCreateUserWithEmailAndPassword = (email, password) => {\n    return this.auth.createUserWithEmailAndPassword(email, password);\n  }\n\n  doSendEmailVerification = () => {\n    this.auth.currentUser.sendEmailVerification({\n      url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT,\n    });\n  }\n\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n  /*\n\n   doSignInWithGoogle = () =>\n    this.auth.signInWithPopup(this.googleProvider);\n\n  doSignInWithFacebook = () =>\n    this.auth.signInWithPopup(this.facebookProvider);\n\n  doSignInWithTwitter = () =>\n    this.auth.signInWithPopup(this.twitterProvider)\n\n  */\n\n  doSignOut = () => this.auth.signOut();\n\n  doPasswordUpdate = password =>\n    this.auth.currentUser.updatePassword(password);\n\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n  doPasswordUpdate = password =>\n    this.auth.currentUser.updatePassword(password);\n\n\n  // *** Merge Auth and DB User API *** //\n\n  onAuthUserListener = (next, fallback) =>\n    this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        console.log(\"The authenticated user is: \");\n        console.log(authUser);\n        this.user(authUser.uid)\n          .once('value')\n          .then(snapshot => {\n            const dbUser = snapshot.val();\n            // merge auth and db user\n            authUser = {\n              uid: authUser.uid,\n              email: authUser.email,\n              emailVerified: authUser.emailVerified,\n              //providerData: authUser.providerData,\n              ...dbUser,\n            };\n\n            next(authUser);\n          });\n      } else {\n        fallback();\n      }\n    });\n\n  // *** User API ***\n\n  user = uid => this.db.ref(`users/${uid}`);\n\n  users = () => this.db.ref('users');\n  /*\n    // *** Message API ***\n\n  message = uid => this.db.ref(`messages/${uid}`);\n\n  messages = () => this.db.ref('messages');\n  */\n}\n\nexport default fire;\n\n"]},"metadata":{},"sourceType":"module"}